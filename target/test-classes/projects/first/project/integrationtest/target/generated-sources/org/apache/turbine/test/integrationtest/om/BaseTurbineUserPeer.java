package org.apache.turbine.test.integrationtest.om;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Column;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.TorqueRuntimeException;
import org.apache.torque.adapter.IDMethod;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.map.DatabaseMap;
import org.apache.torque.map.TableMap;
import org.apache.torque.map.ColumnMap;
import org.apache.torque.map.ForeignKeyMap;
import org.apache.torque.map.InheritanceMap;
import org.apache.torque.om.mapper.RecordMapper;
import org.apache.torque.om.mapper.CompositeMapper;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.Transaction;
import org.apache.torque.util.ColumnValues;
import org.apache.torque.util.JdbcTypedValue;



/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Oct 04 13:45:56 EDT 2018]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to TurbineUserPeer
 */

public abstract class BaseTurbineUserPeer
{
    /** The class log. */
    private static Log log = LogFactory.getLog(BaseTurbineUserPeerImpl.class);
    /** The default database name for this class. */
    public static final String DATABASE_NAME;

     /** The table name for this class. */
    public static final String TABLE_NAME;

     /** The table map for this class. */
    public static final TableMap TABLE;
    /** The column for the USER_ID field */
    public static final ColumnMap USER_ID;
    /** The column for the LOGIN_NAME field */
    public static final ColumnMap LOGIN_NAME;
    /** The column for the PASSWORD_VALUE field */
    public static final ColumnMap PASSWORD_VALUE;
    /** The column for the FIRST_NAME field */
    public static final ColumnMap FIRST_NAME;
    /** The column for the LAST_NAME field */
    public static final ColumnMap LAST_NAME;
    /** The column for the EMAIL field */
    public static final ColumnMap EMAIL;
    /** The column for the CONFIRM_VALUE field */
    public static final ColumnMap CONFIRM_VALUE;
    /** The column for the MODIFIED_DATE field */
    public static final ColumnMap MODIFIED_DATE;
    /** The column for the CREATED field */
    public static final ColumnMap CREATED;
    /** The column for the LAST_LOGIN field */
    public static final ColumnMap LAST_LOGIN;
    /** The column for the OBJECTDATA field */
    public static final ColumnMap OBJECTDATA;

    /** number of columns for this peer */
    public static final int numColumns = 11;


    /** The implementation of the peer. */
    private static TurbineUserPeerImpl turbineUserPeerImpl;


    static
    {
        DatabaseMap dbMap = Torque.getOrCreateDatabase("turbine")
                .getDatabaseMap();
        if (dbMap.getTable("TURBINE_USER") == null)
        {
            dbMap.addTable("TURBINE_USER");
        }
        DATABASE_NAME = "turbine";
        TABLE_NAME = "TURBINE_USER";

        TABLE = dbMap.getTable("TURBINE_USER");
        TABLE.setJavaName("TurbineUser");
        TABLE.setOMClass(org.apache.turbine.test.integrationtest.om.TurbineUser.class);
        TABLE.setPeerClass(org.apache.turbine.test.integrationtest.om.TurbineUserPeer.class);
        TABLE.setPrimaryKeyMethod(IDMethod.NATIVE);
        TABLE.setPrimaryKeyMethodInfo(IDMethod.ID_BROKER, TABLE.getName());
        TABLE.setPrimaryKeyMethodInfo(IDMethod.SEQUENCE, "TURBINE_USER_SEQ");
        TABLE.setPrimaryKeyMethodInfo(IDMethod.AUTO_INCREMENT, "TURBINE_USER");
        TABLE.setUseInheritance(true);


    // ------------- Column: USER_ID --------------------
        USER_ID = new ColumnMap("USER_ID", TABLE);
        USER_ID.setType(Integer.valueOf(0));
        USER_ID.setTorqueType("INTEGER");
        USER_ID.setUsePrimitive(false);
        USER_ID.setPrimaryKey(true);
        USER_ID.setNotNull(true);
        USER_ID.setJavaName("EntityId");
        USER_ID.setAutoIncrement(true);
        USER_ID.setProtected(false);
        USER_ID.setJavaType( "Integer" );
        USER_ID.setPosition(1);
        TABLE.addColumn(USER_ID);
    // ------------- Column: LOGIN_NAME --------------------
        LOGIN_NAME = new ColumnMap("LOGIN_NAME", TABLE);
        LOGIN_NAME.setType("");
        LOGIN_NAME.setTorqueType("VARCHAR");
        LOGIN_NAME.setUsePrimitive(false);
        LOGIN_NAME.setPrimaryKey(false);
        LOGIN_NAME.setNotNull(true);
        LOGIN_NAME.setJavaName("EntityName");
        LOGIN_NAME.setAutoIncrement(true);
        LOGIN_NAME.setProtected(false);
        LOGIN_NAME.setJavaType( "String" );
        LOGIN_NAME.setSize(64);
        LOGIN_NAME.setPosition(2);
        TABLE.addColumn(LOGIN_NAME);
    // ------------- Column: PASSWORD_VALUE --------------------
        PASSWORD_VALUE = new ColumnMap("PASSWORD_VALUE", TABLE);
        PASSWORD_VALUE.setType("");
        PASSWORD_VALUE.setTorqueType("VARCHAR");
        PASSWORD_VALUE.setUsePrimitive(false);
        PASSWORD_VALUE.setPrimaryKey(false);
        PASSWORD_VALUE.setNotNull(true);
        PASSWORD_VALUE.setJavaName("Password");
        PASSWORD_VALUE.setAutoIncrement(true);
        PASSWORD_VALUE.setProtected(false);
        PASSWORD_VALUE.setJavaType( "String" );
        PASSWORD_VALUE.setSize(16);
        PASSWORD_VALUE.setPosition(3);
        TABLE.addColumn(PASSWORD_VALUE);
    // ------------- Column: FIRST_NAME --------------------
        FIRST_NAME = new ColumnMap("FIRST_NAME", TABLE);
        FIRST_NAME.setType("");
        FIRST_NAME.setTorqueType("VARCHAR");
        FIRST_NAME.setUsePrimitive(false);
        FIRST_NAME.setPrimaryKey(false);
        FIRST_NAME.setNotNull(true);
        FIRST_NAME.setJavaName("FirstName");
        FIRST_NAME.setAutoIncrement(true);
        FIRST_NAME.setProtected(false);
        FIRST_NAME.setJavaType( "String" );
        FIRST_NAME.setSize(64);
        FIRST_NAME.setPosition(4);
        TABLE.addColumn(FIRST_NAME);
    // ------------- Column: LAST_NAME --------------------
        LAST_NAME = new ColumnMap("LAST_NAME", TABLE);
        LAST_NAME.setType("");
        LAST_NAME.setTorqueType("VARCHAR");
        LAST_NAME.setUsePrimitive(false);
        LAST_NAME.setPrimaryKey(false);
        LAST_NAME.setNotNull(true);
        LAST_NAME.setJavaName("LastName");
        LAST_NAME.setAutoIncrement(true);
        LAST_NAME.setProtected(false);
        LAST_NAME.setJavaType( "String" );
        LAST_NAME.setSize(64);
        LAST_NAME.setPosition(5);
        TABLE.addColumn(LAST_NAME);
    // ------------- Column: EMAIL --------------------
        EMAIL = new ColumnMap("EMAIL", TABLE);
        EMAIL.setType("");
        EMAIL.setTorqueType("VARCHAR");
        EMAIL.setUsePrimitive(false);
        EMAIL.setPrimaryKey(false);
        EMAIL.setNotNull(false);
        EMAIL.setJavaName("Email");
        EMAIL.setAutoIncrement(true);
        EMAIL.setProtected(false);
        EMAIL.setJavaType( "String" );
        EMAIL.setSize(64);
        EMAIL.setPosition(6);
        TABLE.addColumn(EMAIL);
    // ------------- Column: CONFIRM_VALUE --------------------
        CONFIRM_VALUE = new ColumnMap("CONFIRM_VALUE", TABLE);
        CONFIRM_VALUE.setType("");
        CONFIRM_VALUE.setTorqueType("VARCHAR");
        CONFIRM_VALUE.setUsePrimitive(false);
        CONFIRM_VALUE.setPrimaryKey(false);
        CONFIRM_VALUE.setNotNull(false);
        CONFIRM_VALUE.setJavaName("Confirmed");
        CONFIRM_VALUE.setAutoIncrement(true);
        CONFIRM_VALUE.setProtected(false);
        CONFIRM_VALUE.setJavaType( "String" );
        CONFIRM_VALUE.setSize(16);
        CONFIRM_VALUE.setPosition(7);
        TABLE.addColumn(CONFIRM_VALUE);
    // ------------- Column: MODIFIED_DATE --------------------
        MODIFIED_DATE = new ColumnMap("MODIFIED_DATE", TABLE);
        MODIFIED_DATE.setType(new Date());
        MODIFIED_DATE.setTorqueType("TIMESTAMP");
        MODIFIED_DATE.setUsePrimitive(false);
        MODIFIED_DATE.setPrimaryKey(false);
        MODIFIED_DATE.setNotNull(false);
        MODIFIED_DATE.setJavaName("ModifiedDate");
        MODIFIED_DATE.setAutoIncrement(true);
        MODIFIED_DATE.setProtected(false);
        MODIFIED_DATE.setJavaType( "java.util.Date" );
        MODIFIED_DATE.setPosition(8);
        TABLE.addColumn(MODIFIED_DATE);
    // ------------- Column: CREATED --------------------
        CREATED = new ColumnMap("CREATED", TABLE);
        CREATED.setType(new Date());
        CREATED.setTorqueType("TIMESTAMP");
        CREATED.setUsePrimitive(false);
        CREATED.setPrimaryKey(false);
        CREATED.setNotNull(false);
        CREATED.setJavaName("CreateDate");
        CREATED.setAutoIncrement(true);
        CREATED.setProtected(false);
        CREATED.setJavaType( "java.util.Date" );
        CREATED.setPosition(9);
        TABLE.addColumn(CREATED);
    // ------------- Column: LAST_LOGIN --------------------
        LAST_LOGIN = new ColumnMap("LAST_LOGIN", TABLE);
        LAST_LOGIN.setType(new Date());
        LAST_LOGIN.setTorqueType("TIMESTAMP");
        LAST_LOGIN.setUsePrimitive(false);
        LAST_LOGIN.setPrimaryKey(false);
        LAST_LOGIN.setNotNull(false);
        LAST_LOGIN.setJavaName("LastLogin");
        LAST_LOGIN.setAutoIncrement(true);
        LAST_LOGIN.setProtected(false);
        LAST_LOGIN.setJavaType( "java.util.Date" );
        LAST_LOGIN.setPosition(10);
        TABLE.addColumn(LAST_LOGIN);
    // ------------- Column: OBJECTDATA --------------------
        OBJECTDATA = new ColumnMap("OBJECTDATA", TABLE);
        OBJECTDATA.setType(new Object());
        OBJECTDATA.setTorqueType("VARBINARY");
        OBJECTDATA.setUsePrimitive(false);
        OBJECTDATA.setPrimaryKey(false);
        OBJECTDATA.setNotNull(false);
        OBJECTDATA.setJavaName("Objectdata");
        OBJECTDATA.setAutoIncrement(true);
        OBJECTDATA.setProtected(false);
        OBJECTDATA.setJavaType( "byte[]" );
        OBJECTDATA.setPosition(11);
        TABLE.addColumn(OBJECTDATA);



        initDatabaseMap();
    }

    /**
     * Creates a new instance of the  implementation of the peer.
     *
     * @return the new instance.
     */
    protected static TurbineUserPeerImpl createTurbineUserPeerImpl()
    {
        TurbineUserPeerImpl instance = new TurbineUserPeerImpl();
        return instance;
    }


    /**
     * Returns an instance of the implementation of the peer.
     * If no instance is currently cached, a new instance is created and cached.
     *
     * @return an instance of the implementation of the peer, not null.
     */
    public static TurbineUserPeerImpl getTurbineUserPeerImpl()
    {
        TurbineUserPeerImpl peerImplInstance = turbineUserPeerImpl;
        if (peerImplInstance == null)
        {
            peerImplInstance = TurbineUserPeer.createTurbineUserPeerImpl();
            turbineUserPeerImpl = peerImplInstance;
        }
        return peerImplInstance;
    }



    /**
     * Sets the instance of the implementation of the peer.
     *
     * @param an instance of the implementation of the peer, or null
     *        if a new instance should be created automatically.
     */
    public static void setTurbineUserPeerImpl(TurbineUserPeerImpl peerImplInstance)
    {
        turbineUserPeerImpl = peerImplInstance;
    }


    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
        getTurbineUserPeerImpl().addSelectColumns(criteria);
    }

    /**
     * changes the boolean values in the criteria to the appropriate type,
     * whenever a booleanchar or booleanint column is involved.
     * This enables the user to create criteria using Boolean values
     * for booleanchar or booleanint columns.
     *
     * @param criteria the criteria in which the boolean values
     *        should be corrected.
     *
     * @throws TorqueException if the database map for the criteria cannot be 
               obtained.
     */
    public static void correctBooleans(Criteria criteria) throws TorqueException
    {
        getTurbineUserPeerImpl().correctBooleans(criteria);
    }

    /**
     * Checks all columns in the criteria to see whether
     * booleanchar and booleanint columns are queried with a boolean.
     * If yes, the query values are mapped onto values the database
     * does understand, i.e. 0 and 1 for booleanints and N and Y for
     * booleanchar columns.
     *
     * @param columnValues The value to be checked for booleanint
     *        and booleanchar columns.
     * @throws TorqueException if the database map for the criteria cannot be
     *         retrieved.
     */
    public static void correctBooleans(
            ColumnValues columnValues)
        throws TorqueException
    {
        getTurbineUserPeerImpl().correctBooleans(columnValues);
    }
    
    /**
     * Selects TurbineUser objects from a database.
     *
     * @param criteria object used to create the SELECT statement.
     *
     * @return the list of selected objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List<TurbineUser> doSelect(Criteria criteria)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelect(criteria);
    }

    /**
     * Selects TurbineUser objects from a database
     * within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param connection the connection holding the transaction, not null.
     *
     * @return The list of selected objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List<TurbineUser> doSelect(
                Criteria criteria,
                Connection connection)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelect(criteria, connection);
    }

    /**
     * Selects rows from a database an maps them to objects.
     *
     * @param criteria A Criteria specifying the records to select, not null.
     * @param mapper The mapper creating the objects from the resultSet,
     *        not null.
     *
     * @return The results of the query, not null.
     *
     * @throws TorqueException if querying the database fails.
     */
    public static <T> List<T> doSelect(
                Criteria criteria,
                RecordMapper<T> mapper)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelect(criteria, mapper);
    }

    /**
     * Selects rows from a database an maps them to objects.
     *
     * @param criteria A Criteria specifying the records to select, not null.
     * @param mapper The mapper creating the objects from the resultSet,
     *        not null.
     * @param connection the database connection for selecting records,
     *        not null.
     *
     * @return The results of the query, not null.
     * @throws TorqueException Error performing database query.
     */
    public static <T> List<T> doSelect(
            Criteria criteria,
            RecordMapper<T> mapper,
            Connection connection)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelect(
                criteria,
                mapper,
                connection);
    }

    /**
     * Selects rows from a database an maps them to objects.
     *
     * @param query the sql query to execute, not null.
     * @param mapper The mapper creating the objects from the resultSet,
     *        not null.
     * @param dbName The name of the database to create the connection for,
     *        or null for the default SDB.
     *
     * @return The results of the query, not null.
     *
     * @throws TorqueException if querying the database fails.
     */
    public static <T> List<T> doSelect(
                String query,
                RecordMapper<T> mapper,
                String dbName)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelect(
                query,
                mapper,
                dbName);
    }

    /**
     * Selects rows from a database an maps them to objects.
     *
     * @param query the SQL Query to execute, not null.
     * @param mapper The mapper creating the objects from the resultSet,
     *        not null.
     * @param connection the database connection, not null.
     *
     * @return The results of the query, not null.
     *
     * @throws TorqueException if querying the database fails.
     */
    public static <T> List<T> doSelect(
                String query,
                RecordMapper<T> mapper,
                Connection connection)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelect(
                query,
                mapper,
                connection);
    }

    /**
     * Selects TurbineUser objects from the database which have
     * the same content as the passed object.
     *
     * @return The list of selected objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List<TurbineUser> doSelect(TurbineUser obj)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelect(obj);
    }

    /**
     * Selects at most one TurbineUser object from a database.
     *
     * @param criteria object used to create the SELECT statement.
     *
     * @return the selected Object, or null if no object was selected.
     *
     * @throws TorqueException If more than one record is selected or if
     *         an error occurs when processing the query.
     */
    public static TurbineUser doSelectSingleRecord(
                Criteria criteria)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelectSingleRecord(criteria);
    }

    /**
     * Selects at most one TurbineUser object from a database
     * within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param connection the connection holding the transaction, not null.
     *
     * @return the selected Object, or null if no object was selected.
     *
     * @throws TorqueException If more than one record is selected or if
     *         an error occurs when processing the query.
     */
    public static TurbineUser doSelectSingleRecord(
                Criteria criteria,
                Connection connection)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelectSingleRecord(criteria, connection);
    }

    /**
     * Selects at most a single row from a database an maps them to objects.
     *
     * @param criteria A Criteria specifying the records to select, not null.
     * @param mapper The mapper creating the objects from the resultSet,
     *        not null.
     *
     * @return The selected row, or null if no records was selected.
     *
     * @throws TorqueException if querying the database fails.
     */
    public static <T> T doSelectSingleRecord(
                org.apache.torque.criteria.Criteria criteria,
                RecordMapper<T> mapper)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelectSingleRecord(
                criteria,
                mapper);
    }

    /**
     * Selects at most a single row from a database an maps them to objects.
     *
     * @param criteria A Criteria specifying the records to select, not null.
     * @param mapper The mapper creating the objects from the resultSet,
     *        not null.
     * @param connection the database connection, not null.
     *
     * @return The selected row, or null if no records was selected.
     *
     * @throws TorqueException if querying the database fails.
     */
    public static <T> T doSelectSingleRecord(
                org.apache.torque.criteria.Criteria criteria,
                RecordMapper<T> mapper,
                Connection connection)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelectSingleRecord(
                criteria,
                mapper,
                connection);
    }

    /**
     * Selects at most one TurbineUser object from the database
     * which has the same content as the passed object.
     *
     * @return the selected Object, or null if no object was selected.
     *
     * @throws TorqueException If more than one record is selected or if
     *         an error occurs when processing the query.
     */
    public static TurbineUser doSelectSingleRecord(
                TurbineUser obj)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doSelectSingleRecord(obj);
    }


    /**
     * Returns a new instance of the Data object class
     */
    public static TurbineUser getDbObjectInstance()
    {
        return getTurbineUserPeerImpl().getDbObjectInstance();
    }


    /**
     * Method to do inserts.
     *
     * @param columnValues the values to insert.
     *
     * @return the primary key of the inserted row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(ColumnValues columnValues) 
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doInsert(columnValues);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.
     *
     * @param columnValues the values to insert.
     * @param con the connection to use, not null.
     *
     * @return the primary key of the inserted row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(ColumnValues columnValues, Connection con)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doInsert(columnValues, con);
    }
    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(TurbineUser obj)
            throws TorqueException
    {
        getTurbineUserPeerImpl().doInsert(obj);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(TurbineUser) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(TurbineUser obj, Connection con)
            throws TorqueException
    {
        getTurbineUserPeerImpl().doInsert(obj, con);
    }

    /**
     * Method to do updates.
     *
     * @param columnValues the values to update plus the primary key
     *        identifying the row to update.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doUpdate(ColumnValues columnValues) throws TorqueException
    {
        return getTurbineUserPeerImpl().doUpdate(columnValues);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param columnValues the values to update plus the primary key
     *        identifying the row to update.
     * @param con the connection to use, not null.
     *
     * @return the number of affected rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doUpdate(ColumnValues columnValues, Connection con)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().doUpdate(columnValues, con);
    }

    /**
     * Executes an update against the database. The rows to be updated
     * are selected using <code>criteria</code> and updated using the values
     * in <code>updateValues</code>.
     *
     * @param criteria selects which rows of which table should be updated.
     * @param updateValues Which columns to update with which values, not null.
     *
     * @return the number of affected rows.
     *
     * @throws TorqueException if updating fails.
     */
    public static int doUpdate(
                Criteria selectCriteria,
                ColumnValues updateValues)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doUpdate(
            selectCriteria,
            updateValues);
    }

    /**
     * Executes an update against the database. The rows to be updated
     * are selected using <code>criteria</code> and updated using the values
     * in <code>updateValues</code>.
     *
     * @param criteria selects which rows of which table should be updated.
     * @param updateValues Which columns to update with which values, not null.
     * @param connection the database connection to use, not null.
     *
     * @return the number of affected rows.
     *
     * @throws TorqueException if updating fails.
     */
    public static int doUpdate(
                Criteria criteria,
                ColumnValues updateValues,
                Connection connection)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doUpdate(
            criteria,
             updateValues,
              connection);
    }

    /**
     * Updates an TurbineUser in the database.
     * The primary key is used to identify the object to update.
     *
     * @param obj the data object to update in the database.
     *
     * @return the number of affected rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doUpdate(TurbineUser obj) throws TorqueException
    {
        return getTurbineUserPeerImpl().doUpdate(obj);
    }

    /**
     * Updates a TurbineUser in the database.
     * The primary key is used to identify the object to update.
     * This method is to be used during a transaction,
     * otherwise the doUpdate(TurbineUser) method can be used.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use, not null.
     
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doUpdate(TurbineUser obj, Connection con)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().doUpdate(obj, con);
    }

    /**
     * Utility method which executes a given sql statement
     * as prepared statement.
     * This method should be used for update, insert, and delete statements.
     * Use executeQuery() for selects.
     *
     * @param statementString A String with the sql statement to execute.
     *
     * @return The number of rows affected.
     *
     * @throws TorqueException if executing the statement fails
     *         or no database connection can be established.
     */
    public static int executeStatement(String statementString) 
            throws TorqueException
    {
        return getTurbineUserPeerImpl().executeStatement(statementString);
    }

    /**
     * Utility method which executes a given sql statement
     * as prepared statement.
     * This method should be used for update, insert, and delete statements.
     * Use executeQuery() for selects.
     *
     * @param statementString A String with the sql statement to execute.
     * @param replacementValues values to use as placeholders in the query.
     *        or null or empty if no placeholders need to be filled.
     *
     * @return The number of rows affected.
     *
     * @throws TorqueException if executing the statement fails
     *         or no database connection can be established.
     */
    public static int executeStatement(
                String statementString,
                List<JdbcTypedValue> replacementValues)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().executeStatement(
                statementString, 
                replacementValues);
    }

    /**
     * Utility method which executes a given sql statement
     * as prepared statement.
     * This method should be used for update, insert, and delete statements.
     * Use executeQuery() for selects.
     *
     * @param statementString A String with the sql statement to execute.
     * @param dbName The name of the database to execute the statement against,
     *        or null for the default DB.
     * @param replacementValues values to use as placeholders in the query.
     *        or null or empty if no placeholders need to be filled.
     *
     * @return The number of rows affected.
     *
     * @throws TorqueException if executing the statement fails
     *         or no database connection can be established.
     */
    public static int executeStatement(
            String statementString,
            String dbName,
            List<JdbcTypedValue> replacementValues)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().executeStatement(
                statementString, 
                dbName,
                replacementValues);
    }

    /**
     * Utility method which executes a given sql statement
     * as prepared statement.
     * This method should be used for update, insert, and delete statements.
     * Use executeQuery() for selects.
     *
     * @param statementString A String with the sql statement to execute.
     * @param con The database connection to use.
     * @param replacementValues values to use as placeholders in the query.
     *        or null or empty if no placeholders need to be filled.
     *
     * @return The number of rows affected.
     *
     * @throws TorqueException if executing the statement fails.
     */
    public static int executeStatement(
            String statementString,
            Connection con,
            List<JdbcTypedValue> replacementValues)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().executeStatement(
                statementString, 
                con,
                replacementValues);
    }

    /**
     * Deletes rows from a database table.
     *
     * @param criteria defines the rows to be deleted, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static int doDelete(Criteria criteria) throws TorqueException
     {
        return getTurbineUserPeerImpl().doDelete(criteria);
     }

    /**
     * Deletes rows from a table.
     * This method uses the passed connection to delete the rows;
     * if a transaction is open in the connection, the deletion happens inside
     * this transaction.
    *
     * @param criteria defines the rows to be deleted, not null.
     * @param con the connection to use, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static int doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
        return getTurbineUserPeerImpl().doDelete(criteria, con);
     }

    /**
     * Deletes a data object, i.e. a row in a table, in the database.
     *
     * @param obj the data object to delete in the database, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doDelete(TurbineUser obj) throws TorqueException
    {
        return getTurbineUserPeerImpl().doDelete(obj);
    }

    /**
     * Deletes a data object, i.e. a row in a table, in the database.
     * This method uses the passed connection to delete the rows;
     * if a transaction is open in the connection, the deletion happens inside
     * this transaction.
     *
     * @param obj the data object to delete in the database, not null.
     * @param con the connection to use, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doDelete(TurbineUser obj, Connection con)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().doDelete(obj, con);
    }

    /**
     * Deletes data objects, i.e. rows in a table, in the database.
     *
     * @param objects the datas object to delete in the database, not null,
     *        may not contain null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doDelete(Collection<TurbineUser> objects)
            throws TorqueException
    {
        return getTurbineUserPeerImpl().doDelete(objects);
    }

    /**
     * Deletes data objects, i.e. rows in a table, in the database.
     * This method uses the passed connection to delete the rows;
     * if a transaction is open in the connection, the deletion happens inside
     * this transaction.
     *
     * @param objects the datas object to delete in the database, not null,
     *        may not contain null.
     * @param con the connection to use for deleting, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doDelete(
            Collection<TurbineUser> objects,
            Connection con)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().doDelete(objects, con);
    }

    /**
     * Deletes a row in the database.
     *
     * @param pk the ObjectKey that identifies the row to delete.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doDelete(ObjectKey pk) throws TorqueException
    {
        return getTurbineUserPeerImpl().doDelete(pk);
    }

    /**
     * Deletes a row in the database.
     * This method uses the passed connection to delete the rows;
     * if a transaction is open in the connection, the deletion happens inside
     * this transaction.
     *
     * @param pk the ObjectKey that identifies the row to delete.
     * @param con the connection to use for deleting, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static int doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().doDelete(pk, con);
    }

    /** 
     * Build a Criteria object which selects all objects which have a given
     * primary key.
     *
     * @param pk the primary key value to build the criteria from, not null.
     */
    public static Criteria buildCriteria(ObjectKey pk)
    {
        return getTurbineUserPeerImpl().buildCriteria(pk);
    }

    /** 
     * Build a Criteria object which selects all objects which primary keys
     * are contained in the passed collection.
     *
     * @param pks the primary key values to build the criteria from, not null,
     *        may not contain null.
     */
    public static Criteria buildCriteria(Collection<ObjectKey> pks)
    {
        return getTurbineUserPeerImpl().buildCriteria(pks);
    }

    /** 
     * Build a Criteria object which selects all passed objects using their
     * primary key. Objects which do not yet have a primary key are ignored.
     *
     * @param objects the objects to build the criteria from, not null,
     *        may not contain null.
     */
    public static Criteria buildPkCriteria(
            Collection<TurbineUser> objects)
    {
        return getTurbineUserPeerImpl().buildPkCriteria(objects);
    }

    /** 
     * Build a Criteria object from the data object for this peer.
     *
     * @param obj the object to build the criteria from, not null.
     */
    public static Criteria buildCriteria(TurbineUser obj)
    {
        return getTurbineUserPeerImpl().buildCriteria(obj);
    }

    /** 
     * Build a Criteria object from the data object for this peer,
     * skipping all binary columns.
     *
     * @param obj the object to build the criteria from, not null.
     */
    public static Criteria buildSelectCriteria(TurbineUser obj)
    {
        return getTurbineUserPeerImpl().buildSelectCriteria(obj);
    }

    /** 
     * Returns the contents of the object as ColumnValues object
     *
     * @throws TorqueException if the table map cannot be retrieved
     *         (should not happen).
     */
    public static ColumnValues buildColumnValues(TurbineUser turbineUser)
            throws TorqueException
    {
        
        return getTurbineUserPeerImpl().buildColumnValues(turbineUser);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static TurbineUser retrieveByPK(Integer pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return getTurbineUserPeerImpl().retrieveByPK(pk);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static TurbineUser retrieveByPK(Integer pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return getTurbineUserPeerImpl().retrieveByPK(pk, con);
    }
    
    
    

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static TurbineUser retrieveByPK(ObjectKey pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return getTurbineUserPeerImpl().retrieveByPK(pk);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static TurbineUser retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return getTurbineUserPeerImpl().retrieveByPK(pk, con);
    }


    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List<TurbineUser> retrieveByPKs(Collection<ObjectKey> pks)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().retrieveByPKs(pks);
    }

    /**
     * Retrieve multiple objects by pk
     *
     * @param pks List of primary keys
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List<TurbineUser> retrieveByPKs(Collection<ObjectKey> pks, Connection con)
        throws TorqueException
    {
        return getTurbineUserPeerImpl().retrieveByPKs(pks,con);
    }




    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toFill is null or contains null elements.
     */
    public static void setAndSaveTurbineUserGroupRoles(
            TurbineUser toLinkTo,
            Collection<TurbineUserGroupRole> toSave) 
        throws TorqueException
    {
        getTurbineUserPeerImpl().setAndSaveTurbineUserGroupRoles(toLinkTo, toSave);
    }

    /** 
     * Saves the passed collection as linked objects.
     * This means the following is done:
     * <ul>
     *  <li>
     *    The current collection of objects which are linked to toLinkTo
     *    and which are also in the list toSave is read from the database
     *    into the list intersection.
     *  </li>
     *  <li>
     *    All objects in toSave which are not in intersection are inserted.
     *  </li>
     *  <li>
     *    All objects in intersection are updated with the 
     *    corresponding values in toSave and saved.
     *  </li>
     *  <li>
     *    All objects in the database which are linked to toLinkTo but are 
     *    not in toSave are deleted from the database.
     *  </li>
     * </ul>
     *
     * @param toLinkTo the object which collections should be set with the
     *        values in toSave.
     * @param toSave Contains the objects to save, not null, 
     *        may not contain null.
     * @param connection the database connection to use.
     *
     * @throws TorqueException if an error accessing the database occurs.
     * @throws NullPointerException if toFill is null or contains null elements.
     */
    public void setAndSaveTurbineUserGroupRoles(
            TurbineUser toLinkTo,
            Collection<TurbineUserGroupRole> toSave,
            Connection connection) 
        throws TorqueException
    {
        getTurbineUserPeerImpl().setAndSaveTurbineUserGroupRoles(toLinkTo, toSave);
    }

    /**
     * Returns the TableMap related to this peer.
     *
     * @return the table map, not null.
     *
     * @throws TorqueException if the Peer instance does not hold a Table map.
     */
    public static TableMap getTableMap()
        throws TorqueException
    {
        return getTurbineUserPeerImpl().getTableMap();
    }

    public static void initDatabaseMap()
    {
    }


}
