package org.apache.turbine.test.integrationtest.om;

import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.Types;
import java.io.IOException;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;

import org.apache.commons.lang.ObjectUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.torque.NoRowsException;
import org.apache.torque.OptimisticLockingFailedException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.TorqueRuntimeException;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.criteria.Criterion;
import org.apache.torque.om.mapper.RecordMapper;
import org.apache.torque.om.mapper.CompositeMapper;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.ComboKey;
import org.apache.torque.map.TableMap;
import org.apache.torque.util.Transaction;
import org.apache.torque.util.ColumnValues;
import org.apache.torque.util.JdbcTypedValue;



/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Thu Oct 04 13:45:56 EDT 2018]
 *
 * You should not use this class directly.  It should not even be
 * extended; all references should be to TurbineUserGroupRolePeer
 */

public abstract class BaseTurbineUserGroupRolePeerImpl
    extends org.apache.torque.util.BasePeerImpl<TurbineUserGroupRole>
{
    /** The class log. */
    private static Log log = LogFactory.getLog(BaseTurbineUserGroupRolePeerImpl.class);

    /** Serial version */
    private static final long serialVersionUID = 1538675156914L;



    /**
     * Constructor.
     * The recordMapper, tableMap and databaseName fields are correctly
     * initialized.
     */
    public BaseTurbineUserGroupRolePeerImpl()
    {
        this(new TurbineUserGroupRoleRecordMapper(),
            TurbineUserGroupRolePeer.TABLE,
            TurbineUserGroupRolePeer.DATABASE_NAME);
    }

    /**
     * Constructor providing the objects to be injected as parameters.
     *
     * @param recordMapper a record mapper to map JDBC result sets to objects
     * @param tableMap the default table map
     * @param databaseName the name of the database
     */
    public BaseTurbineUserGroupRolePeerImpl(
            RecordMapper<TurbineUserGroupRole> recordMapper, 
            TableMap tableMap,
            String databaseName)
    {
        super(recordMapper, tableMap, databaseName);
    }


    /**
     * Selects TurbineUserGroupRole objects from the database which have
     * the same content as the passed object.
     *
     * @return The list of selected objects, not null.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> doSelect(TurbineUserGroupRole obj)
            throws TorqueException
    {
        return doSelect(buildSelectCriteria(obj));
    }

    /**
     * Selects at most one TurbineUserGroupRole object from the database
     * which has the same content as the passed object.
     *
     * @return the selected Object, or null if no object was selected.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public TurbineUserGroupRole doSelectSingleRecord(
                TurbineUserGroupRole obj)
            throws TorqueException
    {
        List<TurbineUserGroupRole> turbineUserGroupRoleList = doSelect(obj);
        TurbineUserGroupRole turbineUserGroupRole = null;
        if (turbineUserGroupRoleList.size() > 1)
        {
            throw new TooManyRowsException("Object " + obj 
                + " matched more than one record");
        }
        if (!turbineUserGroupRoleList.isEmpty())
        {
            turbineUserGroupRole = turbineUserGroupRoleList.get(0);
        }
        return turbineUserGroupRole;
    }

    /**
     * Returns a new instance of the Data object class
     */
    public TurbineUserGroupRole getDbObjectInstance()
    {
        return new TurbineUserGroupRole();
    }


    /**
     * Method to do inserts.
     *
     * @param columnValues the values to insert.
     *
     * @return the primary key of the inserted row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public ObjectKey doInsert(ColumnValues columnValues) throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            ObjectKey result = doInsert(columnValues, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.
     *
     * @param columnValues the values to insert.
     * @param con the connection to use, not null.
     *
     * @return the primary key of the inserted row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public ObjectKey doInsert(ColumnValues columnValues, Connection con)
        throws TorqueException
    {
        correctBooleans(columnValues);
        return super.doInsert(columnValues, con);
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public void doInsert(TurbineUserGroupRole obj) throws TorqueException
    {
        doInsert(buildColumnValues(obj));
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(TurbineUserGroupRole) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public void doInsert(TurbineUserGroupRole obj, Connection con)
        throws TorqueException
    {
        doInsert(buildColumnValues(obj), con);
        obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do updates.
     *
     * @param columnValues the values to update plus the primary key
     *        identifying the row to update.
     *
     * @return the number of affected rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doUpdate(ColumnValues columnValues) throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            int result = doUpdate(columnValues, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.
     *
     * @param columnValues the values to update plus the primary key
     *        identifying the row to update.
     * @param con the connection to use, not null.
     *
     * @return the number of affected rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doUpdate(ColumnValues columnValues, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria 
                = new Criteria(TurbineUserGroupRolePeer.DATABASE_NAME);
        correctBooleans(columnValues);

        selectCriteria.where(
                TurbineUserGroupRolePeer.USER_ID,
                columnValues.remove(TurbineUserGroupRolePeer.USER_ID).getValue());
        selectCriteria.where(
                TurbineUserGroupRolePeer.GROUP_ID,
                columnValues.remove(TurbineUserGroupRolePeer.GROUP_ID).getValue());
        selectCriteria.where(
                TurbineUserGroupRolePeer.ROLE_ID,
                columnValues.remove(TurbineUserGroupRolePeer.ROLE_ID).getValue());


        int rowCount = doUpdate(selectCriteria, columnValues, con);
        return rowCount;
    }

    /**
     * Updates an TurbineUserGroupRole in the database.
     * The primary key is used to identify the object to update.
     *
     * @param obj the data object to update in the database.
     *
     * @return the number of affected rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doUpdate(TurbineUserGroupRole obj) throws TorqueException
    {
        ColumnValues columnValues = buildColumnValues(obj);
        int result = doUpdate(columnValues);
        obj.setModified(false);
        return result;
    }

    /**
     * Updates a TurbineUserGroupRole in the database.
     * The primary key is used to identify the object to update.
     * This method is to be used during a transaction,
     * otherwise the doUpdate(TurbineUserGroupRole) method can be used.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use, not null.
     
     * @return the number of affected rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doUpdate(TurbineUserGroupRole obj, Connection con)
        throws TorqueException
    {
        ColumnValues columnValues = buildColumnValues(obj);
        int result = doUpdate(columnValues, con);
        obj.setModified(false);
        return result;
    }

    /**
     * Deletes a data object, i.e. a row in a table, in the database.
     *
     * @param obj the data object to delete in the database, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(TurbineUserGroupRole obj) throws TorqueException
    {
        int result = doDelete(buildCriteria(obj.getPrimaryKey()));
        obj.setDeleted(true);
        return result;
    }

    /**
     * Deletes a data object, i.e. a row in a table, in the database.
     * This method is to be used during a transaction, otherwise use the
     * doDelete(TurbineUserGroupRole) method.
     *
     * @param obj the data object to delete in the database, not null.
     * @param con the connection to use, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(TurbineUserGroupRole obj, Connection con)
        throws TorqueException
    {
        int result = doDelete(buildCriteria(obj.getPrimaryKey()), con);
        obj.setDeleted(true);
        return result;
    }

    /**
     * Deletes data objects, i.e. rows in a table, in the database.
     *
     * @param objects the data object to delete in the database, not null,
     *        may not contain null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(Collection<TurbineUserGroupRole> objects)
            throws TorqueException
    {
        int result = doDelete(buildPkCriteria(objects));
        for (TurbineUserGroupRole object : objects)
        {
            object.setDeleted(true);
        }
        return result;
    }

    /**
     * Deletes data objects, i.e. rows in a table, in the database.
     * This method uses the passed connection to delete the rows;
     * if a transaction is open in the connection, the deletion happens inside
     * this transaction.
     *
     * @param objects the data objects to delete in the database, not null,
     *        may not contain null.
     * @param con the connection to use for deleting, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(
            Collection<TurbineUserGroupRole> objects,
            Connection con)
        throws TorqueException
    {
        int result = doDelete(buildPkCriteria(objects), con);
        for (TurbineUserGroupRole object : objects)
        {
            object.setDeleted(true);
        }
        return result;
    }

    /**
     * Deletes a row in the database.
     *
     * @param pk the ObjectKey that identifies the row to delete.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(ObjectKey pk) throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            int deletedRows = doDelete(pk, connection);
            Transaction.commit(connection);
            connection = null;
            return deletedRows;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * Deletes a row in the database.
     * This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.
     *
     * @param pk the ObjectKey that identifies the row to delete.
     * @param con the connection to use for deleting, not null.
     *
     * @return the number of deleted rows.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public int doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        return doDelete(buildCriteria(pk), con);
    }

    /** 
     * Build a Criteria object which selects all objects which have a given
     * primary key.
     *
     * @param pk the primary key value to build the criteria from, not null.
     */
    public Criteria buildCriteria(ObjectKey pk)
    {
        Criteria criteria = new Criteria();
        SimpleKey[] keys = (SimpleKey[])pk.getValue();
        criteria.and(TurbineUserGroupRolePeer.USER_ID, keys[0]);
        criteria.and(TurbineUserGroupRolePeer.GROUP_ID, keys[1]);
        criteria.and(TurbineUserGroupRolePeer.ROLE_ID, keys[2]);
        return criteria;
     }

    /** 
     * Build a Criteria object which selects all objects which primary keys
     * are contained in the passed collection.
     *
     * @param pks the primary key values to build the criteria from, not null,
     *        may not contain null.
     */
    public Criteria buildCriteria(Collection<ObjectKey> pks)
    {
        Criteria criteria = new Criteria();
        for (ObjectKey pk : pks)
        {
            SimpleKey[] keys = (SimpleKey[])pk.getValue();
                Criterion c0 = new Criterion(
                    TurbineUserGroupRolePeer.USER_ID, keys[0], Criteria.EQUAL);
                Criterion c1 = new Criterion(
                    TurbineUserGroupRolePeer.GROUP_ID, keys[1], Criteria.EQUAL);
                    c0.and(c1);
                Criterion c2 = new Criterion(
                    TurbineUserGroupRolePeer.ROLE_ID, keys[2], Criteria.EQUAL);
                    c1.and(c2);
            criteria.or(c0);
        }
        return criteria;
     }


    /** 
     * Build a Criteria object which selects all passed objects using their
     * primary key. Objects which do not yet have a primary key are ignored.
     *
     * @param objects the objects to build the criteria from, not null,
     *        may not contain null.
     */
    public Criteria buildPkCriteria(
            Collection<TurbineUserGroupRole> objects)
    {
        List<ObjectKey> pks = new ArrayList<ObjectKey>(objects.size());
        for (TurbineUserGroupRole object : objects)
        {
            ObjectKey pk = object.getPrimaryKey();
            if (pk != null)
            {
                pks.add(pk);
            }
        }
        return buildCriteria(pks);
    }

    /** 
     * Build a Criteria object from the data object for this peer.
     *
     * @param obj the object to build the criteria from, not null.
     */
    public Criteria buildCriteria(TurbineUserGroupRole obj)
    {
        Criteria criteria = new Criteria(TurbineUserGroupRolePeer.DATABASE_NAME);
        criteria.and(TurbineUserGroupRolePeer.USER_ID, obj.getUserId());
        criteria.and(TurbineUserGroupRolePeer.GROUP_ID, obj.getGroupId());
        criteria.and(TurbineUserGroupRolePeer.ROLE_ID, obj.getRoleId());
        return criteria;
    }

    /** 
     * Build a Criteria object from the data object for this peer,
     * skipping all binary columns.
     *
     * @param obj the object to build the criteria from, not null.
     */
    public Criteria buildSelectCriteria(TurbineUserGroupRole obj)
    {
        Criteria criteria = new Criteria(TurbineUserGroupRolePeer.DATABASE_NAME);
        criteria.and(TurbineUserGroupRolePeer.USER_ID, obj.getUserId());
        criteria.and(TurbineUserGroupRolePeer.GROUP_ID, obj.getGroupId());
        criteria.and(TurbineUserGroupRolePeer.ROLE_ID, obj.getRoleId());
        return criteria;
    }

    /** 
     * Returns the contents of the object as ColumnValues object.
     * Primary key columns which are generated on insertion are not
     * added to the returned object if they still have their initial
     * value. Also, columns which have the useDatabaseDefaultValue
     * flag set to true are also not added to the returned object
     * if they still have their initial value.
     *
     * @throws TorqueException if the table map cannot be retrieved
     *         (should not happen).
     */
    public ColumnValues buildColumnValues(TurbineUserGroupRole turbineUserGroupRole)
            throws TorqueException
    {
        ColumnValues columnValues = new ColumnValues();
        columnValues.put(
                TurbineUserGroupRolePeer.USER_ID,
                new JdbcTypedValue(
                    turbineUserGroupRole.getUserId(),
                    4));
        columnValues.put(
                TurbineUserGroupRolePeer.GROUP_ID,
                new JdbcTypedValue(
                    turbineUserGroupRole.getGroupId(),
                    4));
        columnValues.put(
                TurbineUserGroupRolePeer.ROLE_ID,
                new JdbcTypedValue(
                    turbineUserGroupRole.getRoleId(),
                    4));
        return columnValues;
    }

    /**
     * retrieve object using using pk values.
     *
     * @param userId int
     * @param groupId int
     * @param roleId int
     */
    public TurbineUserGroupRole retrieveByPK(
            int userId,
            int groupId,
            int roleId)
        throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(TurbineUserGroupRolePeer.DATABASE_NAME);
            TurbineUserGroupRole result = retrieveByPK(
               userId,
               groupId,
               roleId,
               connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * retrieve object using using pk values.
     *
     * @param userId int
     * @param groupId int
     * @param roleId int
     * @param con Connection
     */
    public TurbineUserGroupRole retrieveByPK(
            int userId,
            int groupId,
            int roleId,
            Connection con) throws TorqueException
    {

        Criteria criteria = new Criteria();
        criteria.and(TurbineUserGroupRolePeer.USER_ID, userId);
        criteria.and(TurbineUserGroupRolePeer.GROUP_ID, groupId);
        criteria.and(TurbineUserGroupRolePeer.ROLE_ID, roleId);
        List<TurbineUserGroupRole> v = doSelect(criteria, con);
        if (v.size() == 1)
        {
            return v.get(0);
        }
        else
        {
            throw new TorqueException("Failed to select one and only one row.");
        }
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public TurbineUserGroupRole retrieveByPK(ObjectKey pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(TurbineUserGroupRolePeer.DATABASE_NAME);
            TurbineUserGroupRole result = retrieveByPK(pk, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public TurbineUserGroupRole retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        List<TurbineUserGroupRole> v = doSelect(criteria, con);
        if (v.size() == 0)
        {
            throw new NoRowsException("Failed to select a row.");
        }
        else if (v.size() > 1)
        {
            throw new TooManyRowsException("Failed to select only one row.");
        }
        else
        {
            return (TurbineUserGroupRole)v.get(0);
        }
    }


    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> retrieveByPKs(Collection<ObjectKey> pks)
        throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(TurbineUserGroupRolePeer.DATABASE_NAME);
            List<TurbineUserGroupRole> result = retrieveByPKs(pks, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * Retrieve multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> retrieveByPKs(
                Collection<ObjectKey> pks,
                Connection dbcon)
            throws TorqueException
    {
        if (pks == null || pks.size() == 0)
        {
            return new ArrayList<TurbineUserGroupRole>();
        }
        Criteria criteria = buildCriteria(pks);
        List<TurbineUserGroupRole> result = doSelect(criteria, dbcon);
        return result;
    }


    /**
     * Selects a collection of dbObjectClassName objects pre-filled with their
     * TurbineUser objects.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> doSelectJoinTurbineUser(Criteria criteria)
        throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            List<TurbineUserGroupRole> result
                    = TurbineUserGroupRolePeer.doSelectJoinTurbineUser(criteria, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * Selects a collection of TurbineUserGroupRole objects pre-filled with their
     * TurbineUser objects.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> doSelectJoinTurbineUser(
            Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        org.apache.turbine.test.integrationtest.om.TurbineUserPeer.addSelectColumns(criteria);

        CompositeMapper compositeMapper = new CompositeMapper();
        compositeMapper.addMapper(
                new TurbineUserGroupRoleRecordMapper(),
                0);
        compositeMapper.addMapper(
                new TurbineUserRecordMapper(),
                TurbineUserGroupRolePeer.numColumns);
        criteria.addJoin(TurbineUserGroupRolePeer.USER_ID,
            org.apache.turbine.test.integrationtest.om.TurbineUserPeer.USER_ID);

        correctBooleans(criteria);

        List<TurbineUserGroupRole> result = new ArrayList<TurbineUserGroupRole>();
        List<List<Object>> rawResult = doSelect(
                criteria, compositeMapper, conn);
        for (List<Object> rawResultRow : rawResult)
        {
            TurbineUserGroupRole obj1 = (TurbineUserGroupRole) rawResultRow.get(0);
            TurbineUser obj2 = (TurbineUser) rawResultRow.get(1);

            boolean newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                TurbineUserGroupRole temp_obj1 = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineUser temp_obj2 = temp_obj1.getTurbineUser();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addTurbineUserGroupRole(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initTurbineUserGroupRoles();
                obj2.addTurbineUserGroupRole(obj1);
            }
            result.add(obj1);
        }
        return result;
    }
    /**
     * Selects a collection of dbObjectClassName objects pre-filled with their
     * TurbineGroup objects.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> doSelectJoinTurbineGroup(Criteria criteria)
        throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            List<TurbineUserGroupRole> result
                    = TurbineUserGroupRolePeer.doSelectJoinTurbineGroup(criteria, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * Selects a collection of TurbineUserGroupRole objects pre-filled with their
     * TurbineGroup objects.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> doSelectJoinTurbineGroup(
            Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        org.apache.turbine.test.integrationtest.om.TurbineGroupPeer.addSelectColumns(criteria);

        CompositeMapper compositeMapper = new CompositeMapper();
        compositeMapper.addMapper(
                new TurbineUserGroupRoleRecordMapper(),
                0);
        compositeMapper.addMapper(
                new TurbineGroupRecordMapper(),
                TurbineUserGroupRolePeer.numColumns);
        criteria.addJoin(TurbineUserGroupRolePeer.GROUP_ID,
            org.apache.turbine.test.integrationtest.om.TurbineGroupPeer.GROUP_ID);

        correctBooleans(criteria);

        List<TurbineUserGroupRole> result = new ArrayList<TurbineUserGroupRole>();
        List<List<Object>> rawResult = doSelect(
                criteria, compositeMapper, conn);
        for (List<Object> rawResultRow : rawResult)
        {
            TurbineUserGroupRole obj1 = (TurbineUserGroupRole) rawResultRow.get(0);
            TurbineGroup obj2 = (TurbineGroup) rawResultRow.get(1);

            boolean newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                TurbineUserGroupRole temp_obj1 = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineGroup temp_obj2 = temp_obj1.getTurbineGroup();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addTurbineUserGroupRole(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initTurbineUserGroupRoles();
                obj2.addTurbineUserGroupRole(obj1);
            }
            result.add(obj1);
        }
        return result;
    }
    /**
     * Selects a collection of dbObjectClassName objects pre-filled with their
     * TurbineRole objects.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> doSelectJoinTurbineRole(Criteria criteria)
        throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            List<TurbineUserGroupRole> result
                    = TurbineUserGroupRolePeer.doSelectJoinTurbineRole(criteria, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * Selects a collection of TurbineUserGroupRole objects pre-filled with their
     * TurbineRole objects.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public List<TurbineUserGroupRole> doSelectJoinTurbineRole(
            Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        org.apache.turbine.test.integrationtest.om.TurbineRolePeer.addSelectColumns(criteria);

        CompositeMapper compositeMapper = new CompositeMapper();
        compositeMapper.addMapper(
                new TurbineUserGroupRoleRecordMapper(),
                0);
        compositeMapper.addMapper(
                new TurbineRoleRecordMapper(),
                TurbineUserGroupRolePeer.numColumns);
        criteria.addJoin(TurbineUserGroupRolePeer.ROLE_ID,
            org.apache.turbine.test.integrationtest.om.TurbineRolePeer.ROLE_ID);

        correctBooleans(criteria);

        List<TurbineUserGroupRole> result = new ArrayList<TurbineUserGroupRole>();
        List<List<Object>> rawResult = doSelect(
                criteria, compositeMapper, conn);
        for (List<Object> rawResultRow : rawResult)
        {
            TurbineUserGroupRole obj1 = (TurbineUserGroupRole) rawResultRow.get(0);
            TurbineRole obj2 = (TurbineRole) rawResultRow.get(1);

            boolean newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                TurbineUserGroupRole temp_obj1 = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineRole temp_obj2 = temp_obj1.getTurbineRole();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addTurbineUserGroupRole(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initTurbineUserGroupRoles();
                obj2.addTurbineUserGroupRole(obj1);
            }
            result.add(obj1);
        }
        return result;
    }

    /**
     * selects a collection of TurbineUserGroupRole objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in TurbineUserGroupRolePeerImpl.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected List<TurbineUserGroupRole> doSelectJoinAllExceptTurbineUser(Criteria criteria)
        throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            List<TurbineUserGroupRole> result
                    = TurbineUserGroupRolePeer.doSelectJoinAllExceptTurbineUser(criteria, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * selects a collection of TurbineUserGroupRole objects pre-filled with
     * related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in TurbineUserGroupRolePeerImpl.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected List<TurbineUserGroupRole> doSelectJoinAllExceptTurbineUser(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        CompositeMapper compositeMapper = new CompositeMapper();
        compositeMapper.addMapper(new TurbineUserGroupRoleRecordMapper(), 0);
        TurbineUserGroupRolePeer.addSelectColumns(criteria);
        int offset = TurbineUserGroupRolePeer.numColumns;
 
        org.apache.turbine.test.integrationtest.om.TurbineGroupPeer.addSelectColumns(criteria);
        criteria.addJoin(TurbineUserGroupRolePeer.GROUP_ID, org.apache.turbine.test.integrationtest.om.TurbineGroupPeer.GROUP_ID);
        compositeMapper.addMapper(new TurbineGroupRecordMapper(), offset);
        offset = offset + org.apache.turbine.test.integrationtest.om.TurbineGroupPeer.numColumns;
 
        org.apache.turbine.test.integrationtest.om.TurbineRolePeer.addSelectColumns(criteria);
        criteria.addJoin(TurbineUserGroupRolePeer.ROLE_ID, org.apache.turbine.test.integrationtest.om.TurbineRolePeer.ROLE_ID);
        compositeMapper.addMapper(new TurbineRoleRecordMapper(), offset);
        offset = offset + org.apache.turbine.test.integrationtest.om.TurbineRolePeer.numColumns;

        correctBooleans(criteria);

        List<TurbineUserGroupRole> result = new ArrayList<TurbineUserGroupRole>();
        List<List<Object>> rawResult = doSelect(
                criteria, compositeMapper, conn);
        for (List<Object> rawResultRow : rawResult)
        {
            TurbineUserGroupRole turbineUserGroupRole = (TurbineUserGroupRole) rawResultRow.get(0);

            org.apache.turbine.test.integrationtest.om.TurbineGroup obj1 = (org.apache.turbine.test.integrationtest.om.TurbineGroup) rawResultRow.get(1);
            boolean newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                org.apache.turbine.test.integrationtest.om.TurbineUserGroupRole temp_turbineUserGroupRole = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineGroup temp_obj1 = temp_turbineUserGroupRole.getTurbineGroup();
                if (temp_obj1.getPrimaryKey().equals(obj1.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj1.addTurbineUserGroupRole(turbineUserGroupRole);
                    break;
                }
            }
            if (newObject)
            {
                obj1.initTurbineUserGroupRoles();
                obj1.addTurbineUserGroupRole(turbineUserGroupRole);
            }

            org.apache.turbine.test.integrationtest.om.TurbineRole obj2 = (org.apache.turbine.test.integrationtest.om.TurbineRole) rawResultRow.get(2);
            newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                org.apache.turbine.test.integrationtest.om.TurbineUserGroupRole temp_turbineUserGroupRole = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineRole temp_obj2 = temp_turbineUserGroupRole.getTurbineRole();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addTurbineUserGroupRole(turbineUserGroupRole);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initTurbineUserGroupRoles();
                obj2.addTurbineUserGroupRole(turbineUserGroupRole);
            }
            result.add(turbineUserGroupRole);
        }
        return result;
    }
    /**
     * selects a collection of TurbineUserGroupRole objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in TurbineUserGroupRolePeerImpl.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected List<TurbineUserGroupRole> doSelectJoinAllExceptTurbineGroup(Criteria criteria)
        throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            List<TurbineUserGroupRole> result
                    = TurbineUserGroupRolePeer.doSelectJoinAllExceptTurbineGroup(criteria, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * selects a collection of TurbineUserGroupRole objects pre-filled with
     * related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in TurbineUserGroupRolePeerImpl.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected List<TurbineUserGroupRole> doSelectJoinAllExceptTurbineGroup(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        CompositeMapper compositeMapper = new CompositeMapper();
        compositeMapper.addMapper(new TurbineUserGroupRoleRecordMapper(), 0);
        TurbineUserGroupRolePeer.addSelectColumns(criteria);
        int offset = TurbineUserGroupRolePeer.numColumns;
 
        org.apache.turbine.test.integrationtest.om.TurbineUserPeer.addSelectColumns(criteria);
        criteria.addJoin(TurbineUserGroupRolePeer.USER_ID, org.apache.turbine.test.integrationtest.om.TurbineUserPeer.USER_ID);
        compositeMapper.addMapper(new TurbineUserRecordMapper(), offset);
        offset = offset + org.apache.turbine.test.integrationtest.om.TurbineUserPeer.numColumns;
 
        org.apache.turbine.test.integrationtest.om.TurbineRolePeer.addSelectColumns(criteria);
        criteria.addJoin(TurbineUserGroupRolePeer.ROLE_ID, org.apache.turbine.test.integrationtest.om.TurbineRolePeer.ROLE_ID);
        compositeMapper.addMapper(new TurbineRoleRecordMapper(), offset);
        offset = offset + org.apache.turbine.test.integrationtest.om.TurbineRolePeer.numColumns;

        correctBooleans(criteria);

        List<TurbineUserGroupRole> result = new ArrayList<TurbineUserGroupRole>();
        List<List<Object>> rawResult = doSelect(
                criteria, compositeMapper, conn);
        for (List<Object> rawResultRow : rawResult)
        {
            TurbineUserGroupRole turbineUserGroupRole = (TurbineUserGroupRole) rawResultRow.get(0);

            org.apache.turbine.test.integrationtest.om.TurbineUser obj1 = (org.apache.turbine.test.integrationtest.om.TurbineUser) rawResultRow.get(1);
            boolean newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                org.apache.turbine.test.integrationtest.om.TurbineUserGroupRole temp_turbineUserGroupRole = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineUser temp_obj1 = temp_turbineUserGroupRole.getTurbineUser();
                if (temp_obj1.getPrimaryKey().equals(obj1.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj1.addTurbineUserGroupRole(turbineUserGroupRole);
                    break;
                }
            }
            if (newObject)
            {
                obj1.initTurbineUserGroupRoles();
                obj1.addTurbineUserGroupRole(turbineUserGroupRole);
            }

            org.apache.turbine.test.integrationtest.om.TurbineRole obj2 = (org.apache.turbine.test.integrationtest.om.TurbineRole) rawResultRow.get(2);
            newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                org.apache.turbine.test.integrationtest.om.TurbineUserGroupRole temp_turbineUserGroupRole = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineRole temp_obj2 = temp_turbineUserGroupRole.getTurbineRole();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addTurbineUserGroupRole(turbineUserGroupRole);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initTurbineUserGroupRoles();
                obj2.addTurbineUserGroupRole(turbineUserGroupRole);
            }
            result.add(turbineUserGroupRole);
        }
        return result;
    }
    /**
     * selects a collection of TurbineUserGroupRole objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in TurbineUserGroupRolePeerImpl.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected List<TurbineUserGroupRole> doSelectJoinAllExceptTurbineRole(Criteria criteria)
        throws TorqueException
    {
        Connection connection = null;
        try
        {
            connection = Transaction.begin(
                    TurbineUserGroupRolePeer.DATABASE_NAME);
            List<TurbineUserGroupRole> result
                    = TurbineUserGroupRolePeer.doSelectJoinAllExceptTurbineRole(criteria, connection);
            Transaction.commit(connection);
            connection = null;
            return result;
        }
        finally
        {
            if (connection != null)
            {
                Transaction.safeRollback(connection);
            }
        }
    }

    /**
     * selects a collection of TurbineUserGroupRole objects pre-filled with
     * related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in TurbineUserGroupRolePeerImpl.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected List<TurbineUserGroupRole> doSelectJoinAllExceptTurbineRole(Criteria criteria, Connection conn)
        throws TorqueException
    {
        setDbName(criteria);

        CompositeMapper compositeMapper = new CompositeMapper();
        compositeMapper.addMapper(new TurbineUserGroupRoleRecordMapper(), 0);
        TurbineUserGroupRolePeer.addSelectColumns(criteria);
        int offset = TurbineUserGroupRolePeer.numColumns;
 
        org.apache.turbine.test.integrationtest.om.TurbineUserPeer.addSelectColumns(criteria);
        criteria.addJoin(TurbineUserGroupRolePeer.USER_ID, org.apache.turbine.test.integrationtest.om.TurbineUserPeer.USER_ID);
        compositeMapper.addMapper(new TurbineUserRecordMapper(), offset);
        offset = offset + org.apache.turbine.test.integrationtest.om.TurbineUserPeer.numColumns;
 
        org.apache.turbine.test.integrationtest.om.TurbineGroupPeer.addSelectColumns(criteria);
        criteria.addJoin(TurbineUserGroupRolePeer.GROUP_ID, org.apache.turbine.test.integrationtest.om.TurbineGroupPeer.GROUP_ID);
        compositeMapper.addMapper(new TurbineGroupRecordMapper(), offset);
        offset = offset + org.apache.turbine.test.integrationtest.om.TurbineGroupPeer.numColumns;

        correctBooleans(criteria);

        List<TurbineUserGroupRole> result = new ArrayList<TurbineUserGroupRole>();
        List<List<Object>> rawResult = doSelect(
                criteria, compositeMapper, conn);
        for (List<Object> rawResultRow : rawResult)
        {
            TurbineUserGroupRole turbineUserGroupRole = (TurbineUserGroupRole) rawResultRow.get(0);

            org.apache.turbine.test.integrationtest.om.TurbineUser obj1 = (org.apache.turbine.test.integrationtest.om.TurbineUser) rawResultRow.get(1);
            boolean newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                org.apache.turbine.test.integrationtest.om.TurbineUserGroupRole temp_turbineUserGroupRole = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineUser temp_obj1 = temp_turbineUserGroupRole.getTurbineUser();
                if (temp_obj1.getPrimaryKey().equals(obj1.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj1.addTurbineUserGroupRole(turbineUserGroupRole);
                    break;
                }
            }
            if (newObject)
            {
                obj1.initTurbineUserGroupRoles();
                obj1.addTurbineUserGroupRole(turbineUserGroupRole);
            }

            org.apache.turbine.test.integrationtest.om.TurbineGroup obj2 = (org.apache.turbine.test.integrationtest.om.TurbineGroup) rawResultRow.get(2);
            newObject = true;
            for (int j = 0; j < result.size(); j++)
            {
                org.apache.turbine.test.integrationtest.om.TurbineUserGroupRole temp_turbineUserGroupRole = result.get(j);
                org.apache.turbine.test.integrationtest.om.TurbineGroup temp_obj2 = temp_turbineUserGroupRole.getTurbineGroup();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addTurbineUserGroupRole(turbineUserGroupRole);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initTurbineUserGroupRoles();
                obj2.addTurbineUserGroupRole(turbineUserGroupRole);
            }
            result.add(turbineUserGroupRole);
        }
        return result;
    }



}
